---
# tasks file for rhv-ocp

#- include_vars: ovirt_password.yml

# Verify expected DNS and store associated IPs
- name: Validate and store OpenShift Master IPs
  command: "dig +short {{ cloud_infrastructure.masters.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
  with_sequence: count={{ cloud_infrastructure.masters.count }}
  when: cloud_infrastructure.masters.count > 0
  register: masters_ip
  failed_when: masters_ip.stdout == "" or masters_ip.rc == 1

- name: Debug masters_ip
  debug:
    var: masters_ip

#- name: Print masters_ip test
#  debug:
#    msg: "{{ masters_ip['results'][1]['stdout'] }}"


- name: Validate and store OpenShift Etcd IPs
  command: "dig +short {{ cloud_infrastructure.etcdnodes.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
  with_sequence: count={{ cloud_infrastructure.etcdnodes.count }}
  when: cloud_infrastructure.etcdnodes.count > 0
  register: etcdnodes_ip
  failed_when: etcdnodes_ip.stdout == "" or etcdnodes_ip.rc == 1

- name: Validate and store OpenShift Infra IPs
  command: "dig +short {{ cloud_infrastructure.infranodes.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
  with_sequence: count={{ cloud_infrastructure.infranodes.count }}
  when: cloud_infrastructure.infranodes.count > 0
  register: infranodes_ip
  failed_when: infranodes_ip.stdout == "" or infranodes_ip.rc == 1

- name: Validate and store OpenShift App Nodes IPs
  command: "dig +short {{ cloud_infrastructure.appnodes.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
  with_sequence: count={{ cloud_infrastructure.appnodes.count }}
  when: cloud_infrastructure.appnodes.count > 0
  register: appnodes_ip
  failed_when: appnodes_ip.stdout == "" or appnodes_ip.rc == 1

- name: Validate and store OpenShift CNS Nodes IPs
  command: "dig +short {{ cloud_infrastructure.cnsnodes.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
  with_sequence: count={{ cloud_infrastructure.cnsnodes.count }}
  when: cloud_infrastructure.cnsnodes.count > 0
  register: cnsnodes_ip
  failed_when: cnsnodes_ip.stdout == "" or cnsnodes_ip.rc == 1

## Create the VMs
- name: Obtain SSO token
  ovirt_auth:
    state: present
#    url: "{{ ovirt_url }}"
#    username: "{{ ovirt_username }}"
#    password: "{{ ovirt_password }}"
#    ca_file: "{{ ovirt_ca_file }}"

### Creates the Masters
- name: Create OCP Master Virtual Machines from template
  ovirt_vms:
    name: "{{ cloud_infrastructure.masters.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
    template: "{{ cloud_infrastructure.masters.template_name }}"
    state: running
    cluster: "{{ cloud_infrastructure.masters.rhv_cluster }}"
    cpu_cores: "{{ cloud_infrastructure.masters.cpu_count }}"
    memory: "{{ cloud_infrastructure.masters.memory }}"
    wait: True
    cloud_init:
      host_name: "{{ cloud_infrastructure.masters.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
      dns_search: "{{ dns_domain }}"
      nic_boot_protocol: static
      nic_ip_address: "{{ masters_ip['results'][item|int -1]['stdout'] }}"
      nic_netmask: "{{ cloud_infrastructure.masters.network_netmask }}"
      nic_gateway: "{{ cloud_infrastructure.masters.network_gateway }}"
      nic_name: "{{ cloud_infrastructure.masters.network_nic_name }}"
      nic_on_boot: true
  with_sequence: count={{ cloud_infrastructure.masters.count }}

- name: Create OCP Master Docker disk
  ovirt_disk:
    name: "{{ cloud_infrastructure.masters.name_prefix }}-{{ item }}-{{ env_id }}-docker-disk"
    vm_name: "{{ cloud_infrastructure.masters.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
    storage_domain: "{{ cloud_infrastructure.masters.docker_storage_domain }}"
    size: "{{ cloud_infrastructure.masters.docker_volume_size }}"
    format: cow
    interface: virtio
  with_sequence: count={{ cloud_infrastructure.masters.count }}

- name: Create OCP Master Etcd disk
  ovirt_disk:
    name: "{{ cloud_infrastructure.masters.name_prefix }}-{{ item }}-{{ env_id }}-etcd-disk"
    vm_name: "{{ cloud_infrastructure.masters.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
    storage_domain: "{{ cloud_infrastructure.masters.etcd_storage_domain }}"
    size: "{{ cloud_infrastructure.masters.etcd_volume_size }}"
    format: cow
    interface: virtio
  with_sequence: count={{ cloud_infrastructure.masters.count }}

- name: Tag as master
  ovirt_tags:
    name: "{{ group_masters_tag }}"
    state: attached
    vms:
      - "{{ cloud_infrastructure.masters.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
  with_sequence: count={{ cloud_infrastructure.masters.count }}
  when: cloud_infrastructure.etcdnodes.count > 0

- name: Tag as a master and etcd
  ovirt_tags:
    name: "{{ group_masters_etcd_tag }}"
    state: attached
    vms:
      - "{{ cloud_infrastructure.masters.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
  with_sequence: count={{ cloud_infrastructure.masters.count }}
  when: cloud_infrastructure.etcdnodes.count == 0

########### ETCD NODES ##############

- name: Create OCP Etcd Virtual Machines from template
  ovirt_vms:
    name: "{{ cloud_infrastructure.etcdnodes.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
    template: "{{ cloud_infrastructure.etcdnodes.template_name }}"
    state: running
    cluster: "{{ cloud_infrastructure.etcdnodes.rhv_cluster }}"
    cpu_cores: "{{ cloud_infrastructure.etcdnodes.cpu_count }}"
    memory: "{{ cloud_infrastructure.etcdnodes.memory }}"
    wait: True
    cloud_init:
      host_name: "{{ cloud_infrastructure.etcdnodes.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
      dns_search: "{{ dns_domain }}"
      nic_boot_protocol: static
      nic_ip_address: "{{ etcdnodes_ip['results'][item|int -1]['stdout'] }}"
      nic_netmask: "{{ cloud_infrastructure.etcdnodes.network_netmask }}"
      nic_gateway: "{{ cloud_infrastructure.etcdnodes.network_gateway }}"
      nic_name: "{{ cloud_infrastructure.etcdnodes.network_nic_name }}"
      nic_on_boot: true
  with_sequence: count={{ cloud_infrastructure.etcdnodes.count }}

- name: Create OCP Etcdnode Docker disk
  ovirt_disk:
    name: "{{ cloud_infrastructure.etcdnodes.name_prefix }}-{{ item }}-{{ env_id }}-docker-disk"
    vm_name: "{{ cloud_infrastructure.etcdnodes.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
    storage_domain: "{{ cloud_infrastructure.etcdnodes.docker_storage_domain }}"
    size: "{{ cloud_infrastructure.etcdnodes.docker_volume_size }}"
    format: cow
    interface: virtio
  with_sequence: count={{ cloud_infrastructure.etcdnodes.count }}

- name: Create OCP Etcdnode Etcd disk
  ovirt_disk:
    name: "{{ cloud_infrastructure.etcdnodes.name_prefix }}-{{ item }}-{{ env_id }}-etcd-disk"
    vm_name: "{{ cloud_infrastructure.etcdnodes.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
    storage_domain: "{{ cloud_infrastructure.etcdnodes.etcd_storage_domain }}"
    size: "{{ cloud_infrastructure.etcdnodes.etcd_volume_size }}"
    format: cow
    interface: virtio
  with_sequence: count={{ cloud_infrastructure.etcdnodes.count }}

- name: Tag the etcdnodes
  ovirt_tags:
    name: "{{ group_etcd_nodes_tag }}"
    state: attached
    vms:
      - "{{ cloud_infrastructure.etcdnodes.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
  with_sequence: count={{ cloud_infrastructure.etcdnodes.count }}

########### INFRA NODES ##############

- name: Create OCP Infranodes Virtual Machines from template
  ovirt_vms:
    name: "{{ cloud_infrastructure.infranodes.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
    template: "{{ cloud_infrastructure.infranodes.template_name }}"
    state: running
    cluster: "{{ cloud_infrastructure.infranodes.rhv_cluster }}"
    cpu_cores: "{{ cloud_infrastructure.infranodes.cpu_count }}"
    memory: "{{ cloud_infrastructure.infranodes.memory }}"
    wait: True
    cloud_init:
      host_name: "{{ cloud_infrastructure.infranodes.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
      dns_search: "{{ dns_domain }}"
      nic_boot_protocol: static
      nic_ip_address: "{{ infranodes_ip['results'][item|int -1]['stdout'] }}"
      nic_netmask: "{{ cloud_infrastructure.infranodes.network_netmask }}"
      nic_gateway: "{{ cloud_infrastructure.infranodes.network_gateway }}"
      nic_name: "{{ cloud_infrastructure.infranodes.network_nic_name }}"
      nic_on_boot: true
  with_sequence: count={{ cloud_infrastructure.infranodes.count }}

- name: Create OCP Infranodes Docker disk
  ovirt_disk:
    name: "{{ cloud_infrastructure.infranodes.name_prefix }}-{{ item }}-{{ env_id }}-docker-disk"
    vm_name: "{{ cloud_infrastructure.infranodes.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
    storage_domain: "{{ cloud_infrastructure.infranodes.docker_storage_domain }}"
    size: "{{ cloud_infrastructure.infranodes.docker_volume_size }}"
    format: cow
    interface: virtio
  with_sequence: count={{ cloud_infrastructure.infranodes.count }}

- name: Create OCP Infranodes Origin disk
  ovirt_disk:
    name: "{{ cloud_infrastructure.infranodes.name_prefix }}-{{ item }}-{{ env_id }}-etcd-disk"
    vm_name: "{{ cloud_infrastructure.infranodes.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
    storage_domain: "{{ cloud_infrastructure.infranodes.origin_storage_domain }}"
    size: "{{ cloud_infrastructure.infranodes.origin_volume_size }}"
    format: cow
    interface: virtio
  with_sequence: count={{ cloud_infrastructure.infranodes.count }}

- name: Tag the infranode
  ovirt_tags:
    name: "{{ group_infra_nodes_tag }}"
    state: attached
    vms:
      - "{{ cloud_infrastructure.infranodes.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
  with_sequence: count={{ cloud_infrastructure.infranodes.count }}

########### APP NODES ##############

- name: Create OCP Appnode Virtual Machines from template
  ovirt_vms:
    name: "{{ cloud_infrastructure.appnodes.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
    template: "{{ cloud_infrastructure.appnodes.template_name }}"
    state: running
    cluster: "{{ cloud_infrastructure.appnodes.rhv_cluster }}"
    cpu_cores: "{{ cloud_infrastructure.appnodes.cpu_count }}"
    memory: "{{ cloud_infrastructure.appnodes.memory }}"
    wait: True
    cloud_init:
      host_name: "{{ cloud_infrastructure.appnodes.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
      dns_search: "{{ dns_domain }}"
      nic_boot_protocol: static
      nic_ip_address: "{{ appnodes_ip['results'][item|int -1]['stdout'] }}"
      nic_netmask: "{{ cloud_infrastructure.appnodes.network_netmask }}"
      nic_gateway: "{{ cloud_infrastructure.appnodes.network_gateway }}"
      nic_name: "{{ cloud_infrastructure.appnodes.network_nic_name }}"
      nic_on_boot: true
  with_sequence: count={{ cloud_infrastructure.appnodes.count }}

- name: Create OCP Appnode Docker disk
  ovirt_disk:
    name: "{{ cloud_infrastructure.appnodes.name_prefix }}-{{ item }}-{{ env_id }}-docker-disk"
    vm_name: "{{ cloud_infrastructure.appnodes.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
    storage_domain: "{{ cloud_infrastructure.appnodes.docker_storage_domain }}"
    size: "{{ cloud_infrastructure.appnodes.docker_volume_size }}"
    format: cow
    interface: virtio
  with_sequence: count={{ cloud_infrastructure.appnodes.count }}

- name: Create OCP Appnode Origin disk
  ovirt_disk:
    name: "{{ cloud_infrastructure.appnodes.name_prefix }}-{{ item }}-{{ env_id }}-etcd-disk"
    vm_name: "{{ cloud_infrastructure.appnodes.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
    storage_domain: "{{ cloud_infrastructure.appnodes.origin_storage_domain }}"
    size: "{{ cloud_infrastructure.appnodes.origin_volume_size }}"
    format: cow
    interface: virtio
  with_sequence: count={{ cloud_infrastructure.appnodes.count }}

- name: Tag the appnode
  ovirt_tags:
    name: "{{ group_app_nodes_tag }}"
    state: attached
    vms:
      - "{{ cloud_infrastructure.appnodes.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
  with_sequence: count={{ cloud_infrastructure.appnodes.count }}

########### OCS NODES ##############

- name: Create OCP OpenShift Container Storage Virtual Machines from template
  ovirt_vms:
    name: "{{ cloud_infrastructure.cnsnodes.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
    template: "{{ cloud_infrastructure.cnsnodes.template_name }}"
    state: running
    cluster: "{{ cloud_infrastructure.cnsnodes.rhv_cluster }}"
    cpu_cores: "{{ cloud_infrastructure.cnsnodes.cpu_count }}"
    memory: "{{ cloud_infrastructure.cnsnodes.memory }}"
    wait: True
    cloud_init:
      host_name: "{{ cloud_infrastructure.cnsnodes.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
      dns_search: "{{ dns_domain }}"
      nic_boot_protocol: static
      nic_ip_address: "{{ cnsnodes_ip['results'][item|int -1]['stdout'] }}"
      nic_netmask: "{{ cloud_infrastructure.cnsnodes.network_netmask }}"
      nic_gateway: "{{ cloud_infrastructure.cnsnodes.network_gateway }}"
      nic_name: "{{ cloud_infrastructure.cnsnodes.network_nic_name }}"
      nic_on_boot: true
  with_sequence: count={{ cloud_infrastructure.cnsnodes.count }}

- name: Create OCP OpenShift Container Storage Docker disk
  ovirt_disk:
    name: "{{ cloud_infrastructure.cnsnodes.name_prefix }}-{{ item }}-{{ env_id }}-docker-disk"
    vm_name: "{{ cloud_infrastructure.cnsnodes.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
    storage_domain: "{{ cloud_infrastructure.cnsnodes.docker_storage_domain }}"
    size: "{{ cloud_infrastructure.cnsnodes.docker_volume_size }}"
    format: cow
    interface: virtio
  with_sequence: count={{ cloud_infrastructure.cnsnodes.count }}

- name: Create OCP OpenShift Container Storage Origin disk
  ovirt_disk:
    name: "{{ cloud_infrastructure.cnsnodes.name_prefix }}-{{ item }}-{{ env_id }}-etcd-disk"
    vm_name: "{{ cloud_infrastructure.cnsnodes.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
    storage_domain: "{{ cloud_infrastructure.cnsnodes.origin_storage_domain }}"
    size: "{{ cloud_infrastructure.cnsnodes.origin_volume_size }}"
    format: cow
    interface: virtio
  with_sequence: count={{ cloud_infrastructure.cnsnodes.count }}

- name: Tag the OpenShift Container Storage node
  ovirt_tags:
    name: "{{ group_cns_nodes_tag }}"
    state: attached
    vms:
      - "{{ cloud_infrastructure.cnsnodes.name_prefix }}-{{ item }}.{{ env_id }}.{{ dns_domain }}"
  with_sequence: count={{ cloud_infrastructure.cnsnodes.count }}

## Reboot all the nodes to clear run-once

#- name: Pause for 2 minutes to ensure that cloud-init has finished
#  pause:
#    minutes: 2

#- name: Power off OCP Ansible Host
#  ovirt_vms:
#    state: stopped
#    name: "{{ ansible_bastion_name }}"

#- name: Power on OCP Ansible Host
#  ovirt_vms:
#    state: running
#    name: "{{ ansible_bastion_name }}"
#    cluster: Default

#- name: Stop OCP masters Virtual Machines
#  ovirt_vms:
#    state: stopped
#    name: "{{ master_name }}-{{ item }}"
#  with_sequence: count={{ master_count }}

#- name: Start OCP masters Virtual Machines
#  ovirt_vms:
#    state: running
#    name: "{{ master_name }}-{{ item }}"
#  with_sequence: count={{ master_count }}

#- name: Stop OCP Infra Virtual Machines
#  ovirt_vms:
#    state: stopped
#    name: "{{ infra_name }}-{{ item }}"
#  with_sequence: count={{ infra_count }}

#- name: Start OCP Infra Virtual Machines
#  ovirt_vms:
#    state: running
#    name: "{{ infra_name }}-{{ item }}"
#  with_sequence: count={{ infra_count }}

#- name: Start OCP App Node Virtual Machines
#  ovirt_vms:
#    state: stopped
#    name: "{{ appnode_name }}-{{ item }}"
#  with_sequence: count={{ appnode_count }}

#- name: Start OCP App Node Virtual Machines
#  ovirt_vms:
#    state: running
#    name: "{{ appnode_name }}-{{ item }}"
#  with_sequence: count={{ appnode_count }}
